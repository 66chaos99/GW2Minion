local tbl = 
{
	class = "BehaviorTree",
	nodes = 
	{
		
		{
			class = "Sequence",
			nodes = 
			{
				
				{
					class = "Action",
					nodes = 
					{
					},
					settings = 
					{
						xposoffset = 0,
					},
					variables = 
					{
						finishcode = "",
						info = "Ingame check",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Guest Server ID: '..tostring(Settings.GW2Minion.guestserver))\nGUI:Text(\"Guest Server Name: \"..ml_global_information.GuestServerList[Settings.GW2Minion.guestserver])\nGUI:Text('Autologin Enabled: '..tostring(Settings.GW2Minion.autostartbot))\nGUI:Text('GameState: '..tostring(ml_global_information.GameState))\nif (self.lastrun) then\n\tGUI:Text('Lastrun: '..tostring(TimeSince(self.lastrun)))\nend\n\n",
						runcode = "-- In CHaracter screen\nif ( ml_global_information.GameState == GW2.GAMESTATE.GAMEPLAY ) then\n\tself:success()\nelse\n\tself:fail()\nend",
						startcode = "",
					},
				},
				
				{
					class = "PrioritySelector",
					nodes = 
					{
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "DeathHandler.st",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "DownedHandler.st",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "ReviveDownedPlayers.st",
							},
						},
						
						{
							class = "Action",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								finishcode = "",
								info = "c_Looting",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
								runcode = "self:fail()",
								startcode = "",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "VendorHandler.st",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "HandleAggro.st",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "ReviveHandler.st",
							},
						},
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
										xposoffset = 0,
									},
									variables = 
									{
										finishcode = "",
										info = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "if(Settings.GW2Minion.gather) then\n\t\tcontext.gather_maxdistance = 2500\n\t\tself:success()\nelse\n\t\tself:fail()\nend ",
										startcode = "",
									},
								},
								
								{
									class = "BehaviorTree",
									nodes = 
									{
									},
									settings = 
									{
										expanded = true,
										xposoffset = 0,
									},
									variables = 
									{
										filename = "Gather.st",
									},
								},
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								info = "Gather",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "AttackTargets.st",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "MoveToRandom.st",
							},
						},
					},
					settings = 
					{
						expanded = true,
						xposoffset = 0,
					},
					variables = 
					{
						info = "",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
					},
				},
			},
			settings = 
			{
				expanded = true,
				failThreshold = 1,
				successThreshold = 1,
				xposoffset = 0,
			},
			variables = 
			{
				info = "GameState Switch",
				monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.activeTask or 'None')) GUI:Text('Succeeded Tasks: '..tostring(self.succeededTasks)) GUI:Text('Failed Tasks: '..tostring(self.failedTasks)) GUI:Text('Running Tasks: '..tostring(self.ranTasks))\n",
			},
		},
	},
	settings = 
	{
		doevents = true,
		expanded = true,
		gather = true,
		xposoffset = 0,
	},
	variables = 
	{
		filename = "GrindMode.bt",
		finishcode = "d(\"GrindMode Off\")\n\nml_global_information.Stop()",
		info = "",
		menucode = "GUI:SetNextTreeNodeOpened(true,GUI.SetCond_Appearing)\nif (GUI:TreeNode(GetStringML(\"grindMode\"))) then\n\n\t\t-- SM backwards compatibily fix \n\t\tgBotMode = GetString(\"grindMode\")\n\t\n\n\t\tif ( Settings.GW2Minion.doevents == nil) then Settings.GW2Minion.doevents = true end\n\t\tif ( Settings.GW2Minion.gather == nil) then Settings.GW2Minion.gather = true end\n\n\t\tSettings.GW2Minion.doevents = GUI:Checkbox(GetString(\"Do Events\"),Settings.GW2Minion.doevents)\n\t\tSettings.GW2Minion.gather = GUI:Checkbox(GetString(\"Gather\"),Settings.GW2Minion.gather)\n\n\t\tGUI:TreePop()\nend",
		monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Game State: '..tostring(ml_global_information.GameState))\n",
		runcode = "",
		startcode = "d(\"GrindMode On\")\nml_global_information.Start()",
		subtreeuicode = "if ( self.settings.doevents == nil) then self.settings.doevents = true end\nif ( self.settings.gather == nil) then self.settings.gather = true end\nself.settings.doevents = GUI:Checkbox(GetString(\"Do Events\"),self.settings.doevents)\nself.settings.gather = GUI:Checkbox(GetString(\"Gather\"),self.settings.gather)",
	},
}



return tbl