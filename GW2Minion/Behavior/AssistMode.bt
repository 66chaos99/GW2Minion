local tbl = 
{
	class = "BehaviorTree",
	nodes = 
	{
		
		{
			class = "Sequence",
			nodes = 
			{
				
				{
					class = "Action",
					nodes = 
					{
					},
					variables = 
					{
						finishcode = "",
						info = "Ingame check",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Guest Server ID: '..tostring(Settings.GW2Minion.guestserver))\nGUI:Text(\"Guest Server Name: \"..ml_global_information.GuestServerList[Settings.GW2Minion.guestserver])\nGUI:Text('Autologin Enabled: '..tostring(Settings.GW2Minion.autostartbot))\nGUI:Text('GameState: '..tostring(ml_global_information.GameState))\nif (self.lastrun) then\n\tGUI:Text('Lastrun: '..tostring(TimeSince(self.lastrun)))\nend\n\n",
						runcode = "-- In CHaracter screen\nif ( ml_global_information.GameState ==  GW2.GAMESTATE.GAMEPLAY) then\n\tself:success()\nelse\n\tself:fail()\nend\n",
						startcode = "",
						xposoffset = 0,
					},
				},
				
				{
					class = "PrioritySelector",
					nodes = 
					{
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									variables = 
									{
										finishcode = "",
										info = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "if ( ml_global_information.Player_HealthState == GW2.HEALTHSTATE.Defeated ) then\n\t\tif(Settings.GW2Minion.assistusewaypoints) then\n\t\t\t\tself:success()\n\t\t\t\treturn\n\t\tend\nend\nself:fail()",
										startcode = "",
										xposoffset = 0,
									},
								},
								
								{
									class = "BehaviorTree",
									nodes = 
									{
									},
									variables = 
									{
										expanded = true,
										filename = "DeathHandler.st",
										finishcode = "",
										info = "Death Handler",
										menucode = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Filename: '..self.variables.filename) GUI:Text('Filepath: '..self.filepath)",
										runcode = "",
										startcode = "",
										subtreeuicode = "",
										xposoffset = 6,
									},
								},
							},
							variables = 
							{
								expanded = true,
								info = "",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
								xposoffset = 0,
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							variables = 
							{
								expanded = true,
								filename = "DownedHandler.st",
								finishcode = "",
								info = "Downed Handler",
								menucode = "",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Filename: '..self.variables.filename) GUI:Text('Filepath: '..self.filepath)",
								runcode = "",
								startcode = "",
								subtreeuicode = "",
								xposoffset = 6,
							},
						},
						
						{
							class = "Action",
							nodes = 
							{
							},
							variables = 
							{
								finishcode = "",
								info = "",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
								runcode = "if ( ml_global_information.Player_HealthState == GW2.HEALTHSTATE.Alive ) then\t\n\n\tif ( Settings.GW2Minion.finishenemyassist == true and gw2_common_functions.FinishEnemy() == true ) then return end\n\n\tif ( Settings.GW2Minion.smtargetmode == 1 ) then\n\t\tlocal target = Player:GetTarget()\n\t\tif ( target and (target.alive or target.downed) and target.attackable ) then\t\t\t\t\n\t\t\tgw2_skill_manager:Use(target.id)\n\t\tend\n\t\t\n\telse \n\t\t\n\t\tlocal target = gw2_common_functions.GetBestCharacterTargetForAssist()\t\t\t\n\t\tif ( target and (target.alive or target.downed) and target.attackable ) then\n\t\t\tgw2_skill_manager:Use(target.id)\n\t\tend\n\tend\n\tself:success()\nelse\t\n\tself:fail()\nend",
								startcode = "",
								xposoffset = 12,
							},
						},
					},
					variables = 
					{
						expanded = true,
						info = "",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
						xposoffset = 6.0444444444444,
					},
				},
			},
			variables = 
			{
				expanded = true,
				failThreshold = 1,
				info = "GameState Switch",
				monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.activeTask or 'None')) GUI:Text('Succeeded Tasks: '..tostring(self.succeededTasks)) GUI:Text('Failed Tasks: '..tostring(self.failedTasks)) GUI:Text('Running Tasks: '..tostring(self.ranTasks))",
				successThreshold = 1,
				xposoffset = 0,
			},
		},
	},
	variables = 
	{
		expanded = true,
		filename = "AssistMode.bt",
		finishcode = "d(\"AssistMode Off\")\n\nml_global_information.Stop()",
		info = "",
		menucode = "GUI:SetNextTreeNodeOpened(true,GUI.SetCond_Appearing)\nif (GUI:TreeNode(GetStringML(\"assistMode\"))) then\n\n\n\n\tif ( Settings.GW2Minion.smtargetmode == nil) then Settings.GW2Minion.smtargetmode = 1 end\n\tif ( Settings.GW2Minion.smmode == nil) then Settings.GW2Minion.smmode = 1 end\n\tif ( Settings.GW2Minion.moveintocombatrange == nil) then Settings.GW2Minion.moveintocombatrange = true end\n\tif ( Settings.GW2Minion.finishenemyassist == nil) then Settings.GW2Minion.finishenemyassist = true end\n\tif ( Settings.GW2Minion.assistusewaypoints == nil) then Settings.GW2Minion.assistusewaypoints = false end\n\n\n\tGUI:PushItemWidth(150)\n\tSettings.GW2Minion.smtargetmode = GUI:Combo(GetString(\"sMtargetmode\"),Settings.GW2Minion.smtargetmode,{\"None\",\"LowestHealth\",\"Closest\",\"Biggest Crowd\",})\n\tSettings.GW2Minion.smmode = GUI:Combo(GetString(\"sMmode\"),Settings.GW2Minion.smmode,{\"Everything\",\"Players Only\",})\n\tGUI:PopItemWidth()\n\n\n\tSettings.GW2Minion.moveintocombatrange = GUI:Checkbox(GetString(\"smMoveIntoCombatRange\"),Settings.GW2Minion.moveintocombatrange)\n\tSettings.GW2Minion.finishenemyassist = GUI:Checkbox(GetString(\"AutoStomp\"),Settings.GW2Minion.finishenemyassist)\n\tSettings.GW2Minion.assistusewaypoints = GUI:Checkbox(GetString(\"useWaypoints\"),Settings.GW2Minion.assistusewaypoints)\n\tGUI:TreePop()\nend",
		monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Game State: '..tostring(ml_global_information.GameState))",
		runcode = "-- SM backwards compatibily fix \ngBotMode = GetString(\"assistMode\")\n\t",
		startcode = "d(\"AssistMode On\")\ngw2_unstuck.Start()",
		xposoffset = 0,
	},
}



return tbl