local tbl = 
{
	class = "BehaviorTree",
	nodes = 
	{
		
		{
			class = "PrioritySelector",
			nodes = 
			{
				
				{
					class = "Action",
					nodes = 
					{
					},
					settings = 
					{
						xposoffset = 0,
					},
					variables = 
					{
						finishcode = "",
						info = "Ingame check",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Guest Server ID: '..tostring(Settings.GW2Minion.guestserver))\nGUI:Text(\"Guest Server Name: \"..ml_global_information.GuestServerList[Settings.GW2Minion.guestserver])\nGUI:Text('Autologin Enabled: '..tostring(Settings.GW2Minion.autostartbot))\nGUI:Text('GameState: '..tostring(ml_global_information.GameState))\nif (self.lastrun) then\n\tGUI:Text('Lastrun: '..tostring(TimeSince(self.lastrun)))\nend\n\n",
						runcode = "-- In CHaracter screen\nif ( ml_global_information.GameState == GW2.GAMESTATE.GAMEPLAY) then\n\t\tself:fail()\nelse\n\t\tself:success()\nend",
						startcode = "",
					},
				},
				
				{
					class = "PrioritySelector",
					nodes = 
					{
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
										xposoffset = 0,
									},
									variables = 
									{
										finishcode = "",
										info = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "if ( ml_global_information.Player_HealthState == GW2.HEALTHSTATE.Defeated ) then\n\t\tif(Settings.GW2Minion.assistautorespawn) then\n\t\t\t\tself:success()\n\t\t\t\treturn\n\t\tend\n\t\tself:running()\n\t\treturn\nend\nself:fail()",
										startcode = "",
									},
								},
								
								{
									class = "BehaviorTree",
									nodes = 
									{
									},
									settings = 
									{
										expanded = false,
										xposoffset = 0,
									},
									variables = 
									{
										filename = "DeathHandler.st",
									},
								},
							},
							settings = 
							{
								expanded = true,
								xposoffset = 0,
							},
							variables = 
							{
								info = "Death",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								expanded = false,
								xposoffset = 0,
							},
							variables = 
							{
								filename = "DownedHandler.st",
							},
						},
						
						{
							class = "Action",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								finishcode = "",
								info = "",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
								runcode = "-- In case the setting changes right in the middle of movement\nif(context.combat_ismoving and Settings.GW2Minion.moveintocombatrange == false) then\n\t\tPlayer:StopMovement()\n\tcontext.combat_ismoving = false\nend\nself:fail()",
								startcode = "",
							},
						},
						
						{
							class = "Action",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								finishcode = "",
								info = "Finish enemies",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
								runcode = "if ( Settings.GW2Minion.finishenemyassist == true) then\n\t\tif(gw2_common_functions.FinishEnemy() == true) then\n\t\t\t\tself:success()\n\t\t\t\treturn\n\t\tend\nend\nself:fail()",
								startcode = "",
							},
						},
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
										xposoffset = 0,
									},
									variables = 
									{
										finishcode = "",
										info = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "if(Settings.GW2Minion.smtargetmode == 1 ) then\n\t\tself:success()\nelse\n\t\tself:fail()\nend",
										startcode = "",
									},
								},
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
										xposoffset = 0,
									},
									variables = 
									{
										finishcode = "",
										info = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "local target = Player:GetTarget()\nlocal combatmovement = gw2_skill_manager.CombatMovement()\nlocal activerange = gw2_skill_manager.GetActiveSkillRange()\nif(combatmovement and combatmovement.range and (target == nil or target.distance < activerange/2)) then\n\t\tPlayer:StopMovement()\n\t\tcombatmovement.range = false\nend\n\nif(target and (target.alive or target.downed) and target.attackable and not gw2_common_functions.HasBuffs(target,ml_global_information.InvulnerabilityConditions)) then\n\t\tgw2_skill_manager:Use(target.id)\n\t\tif(Settings.GW2Minion.moveintocombatrange and ml_global_information.Player_OnMesh) then\n\t\t\t\t\n\t\t\t\tif(combatmovement and gw2_skill_manager.CanMove() and target.distance > activerange+target.radius) then\n\t\t\t\t\t\t\t\tlocal tPos = target.pos\n\t\t\t\t\t\t\t\tNavigationManager:MoveTo(tPos.x,tPos.y,tPos.z,activerange/2,false,false,true)\n\t\t\t\t\t\t\t\tcombatmovement.range = true\n\t\t\t\tend\n\t\tend\nend\n\nself:success()",
										startcode = "",
									},
								},
							},
							settings = 
							{
								expanded = true,
								xposoffset = 0,
							},
							variables = 
							{
								info = "Manual target mode",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "PrioritySelector",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
										xposoffset = 0,
									},
									variables = 
									{
										finishcode = "",
										info = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "local ptarget = Player:GetTarget()\nlocal target = nil\nif(ptarget and ptarget.downed and ptarget.friendly and ptarget.distance < 200) then\n\t\tself:success()\n\t\treturn\nend\n\nif(ptarget and ptarget.attackable and not gw2_common_functions.HasBuffs(ptarget,ml_global_information.InvulnerabilityConditions)) then\n\t\ttarget = ptarget\nend\n\nlocal besttarget = gw2_common_functions.GetBestCharacterTargetForAssist(true)\nif(besttarget and (target == nil or besttarget.id ~= target.id)) then\n\t\ttarget = besttarget\nend\nif(target and (target.alive or target.downed) and target.attackable) then\n\t\tcontext.combat_targetid = target.id\n\t\tcontext.combat_target = target\n\t\tcontext.combat_moveintocombatrange = Settings.GW2Minion.moveintocombatrange and ml_global_information.Player_OnMesh\n\t\tcontext.combat_onmeshcheck = false\nend\nself:fail()",
										startcode = "",
									},
								},
								
								{
									class = "BehaviorTree",
									nodes = 
									{
									},
									settings = 
									{
										expanded = true,
										xposoffset = 0,
									},
									variables = 
									{
										filename = "CombatHandler.st",
									},
								},
							},
							settings = 
							{
								expanded = true,
								xposoffset = 0,
							},
							variables = 
							{
								info = "",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
							},
						},
					},
					settings = 
					{
						expanded = true,
						xposoffset = 0,
					},
					variables = 
					{
						info = "",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
					},
				},
			},
			settings = 
			{
				expanded = true,
				xposoffset = 0,
			},
			variables = 
			{
				info = "",
				monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
			},
		},
	},
	settings = 
	{
		expanded = true,
		xposoffset = 0,
	},
	variables = 
	{
		filename = "AssistMode.bt",
		finishcode = "d(\"AssistMode Off\")\n\nml_global_information.Stop()",
		info = "",
		menucode = "GUI:SetNextTreeNodeOpened(true,GUI.SetCond_Appearing)\nif (GUI:TreeNode(GetStringML(\"assistMode\"))) then\n\t\tif ( Settings.GW2Minion.smtargetmode == nil) then Settings.GW2Minion.smtargetmode = 1 end\n\t\tif ( Settings.GW2Minion.smmode == nil) then Settings.GW2Minion.smmode = 1 end\n\t\tif ( Settings.GW2Minion.moveintocombatrange == nil) then Settings.GW2Minion.moveintocombatrange = true end\n\t\tif ( Settings.GW2Minion.finishenemyassist == nil) then Settings.GW2Minion.finishenemyassist = true end\n\t\tif ( Settings.GW2Minion.assistautorespawn == nil) then Settings.GW2Minion.assistautorespawn = false end\n\n\n\t\tGUI:PushItemWidth(150)\n\t\tSettings.GW2Minion.smtargetmode = GUI:Combo(GetString(\"sMtargetmode\"),Settings.GW2Minion.smtargetmode,{GetString(\"None\"),GetString(\"LowestHealth\"),GetString(\"Closest\"),GetString(\"Biggest Crowd\"),})\n\t\tSettings.GW2Minion.smmode = GUI:Combo(GetString(\"Attack Mode\"),Settings.GW2Minion.smmode,{GetString(\"Everything\"),GetString(\"Players Only\"),})\n\t\tGUI:PopItemWidth()\n\n\n\t\tSettings.GW2Minion.moveintocombatrange = GUI:Checkbox(GetString(\"Move Into Combat Range\"),Settings.GW2Minion.moveintocombatrange)\n\t\tSettings.GW2Minion.finishenemyassist = GUI:Checkbox(GetString(\"AutoStomp\"),Settings.GW2Minion.finishenemyassist)\n\t\tSettings.GW2Minion.assistautorespawn = GUI:Checkbox(GetString(\"Auto Respawn\"),Settings.GW2Minion.assistautorespawn)\n\t\tGUI:TreePop()\nend",
		monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Game State: '..tostring(ml_global_information.GameState))",
		runcode = "\n\t",
		startcode = "d(\"AssistMode On\")\nml_global_information.Start()\ngw2_unstuck.manualcontrolmode = true",
	},
}



return tbl