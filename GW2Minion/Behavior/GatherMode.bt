local tbl = 
{
	class = "BehaviorTree",
	nodes = 
	{
		
		{
			class = "PrioritySelector",
			nodes = 
			{
				
				{
					class = "Action",
					nodes = 
					{
					},
					settings = 
					{
						xposoffset = 0,
					},
					variables = 
					{
						finishcode = "",
						info = "",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
						runcode = "if(ml_global_information.GameState == GW2.GAMESTATE.GAMEPLAY) then\n\t\tself:fail()\nelse\n\t\tself:success()\nend",
						startcode = "",
					},
				},
				
				{
					class = "PrioritySelector",
					nodes = 
					{
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
										xposoffset = 0,
									},
									variables = 
									{
										finishcode = "",
										info = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "if ( ml_global_information.Player_HealthState == GW2.HEALTHSTATE.Defeated ) then\t\n\t\tcontext.gather_targetid = nil\nend\nself:success()",
										startcode = "",
									},
								},
								
								{
									class = "BehaviorTree",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										filename = "DeathHandler.st",
									},
								},
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								info = "",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "DownedHandler.st",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "ReviveDownedPlayers.st",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "VendorHandler.st",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "HandleAggro.st",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "ReviveHandler.st",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "Gather.st",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "AttackTargets.st",
							},
						},
						
						{
							class = "BehaviorTree",
							nodes = 
							{
							},
							settings = 
							{
								xposoffset = 0,
							},
							variables = 
							{
								filename = "MoveToRandom.st",
							},
						},
					},
					settings = 
					{
						expanded = true,
						xposoffset = 0,
					},
					variables = 
					{
						info = "",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
					},
				},
			},
			settings = 
			{
				expanded = true,
				xposoffset = 0,
			},
			variables = 
			{
				info = "",
				monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
			},
		},
	},
	settings = 
	{
		doevents = true,
		expanded = true,
		xposoffset = 0,
	},
	variables = 
	{
		filename = "GatherMode.bt",
		finishcode = "d(\"GatherMode Off\")\n\nml_global_information.Stop()",
		info = "",
		menucode = "GUI:SetNextTreeNodeOpened(true,GUI.SetCond_Appearing)\nif (GUI:TreeNode(GetStringML(\"gatherMode\"))) then\n\n\t\t-- SM backwards compatibily fix \n\t\tgBotMode = GetString(\"gatherMode\")\n\t\n\n\t\tif ( Settings.GW2Minion.doevents == nil) then Settings.GW2Minion.doevents = true end\n\n\t\tSettings.GW2Minion.doevents = GUI:Checkbox(GetString(\"doEvents\"),Settings.GW2Minion.doevents)\n\n\t\tGUI:TreePop()\nend",
		monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Filename: '..self.variables.filename) GUI:Text('Filepath: '..self.filepath)",
		runcode = "",
		startcode = "d(\"GatherMode On\")\nml_global_information.Start()\n\ngBotMode = GetString(\"gatherMode\")",
		subtreeuicode = "if ( self.settings.doevents == nil) then self.settings.doevents = true end\n\nself.settings.doevents = GUI:Checkbox(GetString(\"doEvents\"),self.settings.doevents)",
	},
}



return tbl