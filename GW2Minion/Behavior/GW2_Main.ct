local tbl = 
{
	class = "BehaviorTree",
	nodes = 
	{
		
		{
			class = "Sequence",
			nodes = 
			{
				
				{
					class = "Action",
					nodes = 
					{
					},
					variables = 
					{
						finishcode = "",
						info = "Character Screen Handling",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Guest Server ID: '..tostring(Settings.GW2Minion.guestserver))\nGUI:Text(\"Guest Server Name: \"..ml_global_information.GuestServerList[Settings.GW2Minion.guestserver])\nGUI:Text('Autologin Enabled: '..tostring(Settings.GW2Minion.autostartbot))\nGUI:Text('GameState: '..tostring(ml_global_information.GameState))\nif (self.lastrun) then\n\tGUI:Text('Lastrun: '..tostring(TimeSince(self.lastrun)))\nend\n\n",
						runcode = "ml_global_information.GameState = GetGameState()\n-- In CHaracter screen\nif ( ml_global_information.GameState == 4 ) then\n\n\tif ( not self.lastrun or TimeSince(self.lastrun) > 3000 ) then \n\t\tself.lastrun = ml_global_information.Now\n\n\t\tif ( Settings.GW2Minion.guestserver ~= 0 ) then\t\n\t\t\td(\"Selecting Guestserver: \"..ml_global_information.GuestServerList[Settings.GW2Minion.guestserver] ..\" ID: \".. tostring(Settings.GW2Minion.guestserver))\n\t\t\tSetServer(Settings.GW2Minion.guestserver)\n\t\tend\n\t\tif ( Settings.GW2Minion.autostartbot == true ) then\n\t\t\td(\"Pressing PLAY\")\n\t\t\tPressKey(\"RETURN\")\n\t\tend\n\tend\n\tself:running()\nelse\n\tself:success()\nend\n",
						startcode = "",
						xposoffset = 0,
					},
				},
				
				{
					class = "Action",
					nodes = 
					{
					},
					variables = 
					{
						finishcode = "",
						info = "Update Global (often used) Variables to reduce repetitive CPU eating function calls.",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Player Name: '..tostring(ml_global_information.Player_Name))\nGUI:Text('HealthState: '..tostring(ml_global_information.Player_HealthState))\nGUI:Text('SwimState: '..tostring(ml_global_information.Player_SwimState))",
						runcode = "-- INGAME\nif ( ml_global_information.GameState == 16 ) then\n\n\t\tml_global_information.Player_Name = Player.name or \"\"\n\t\tml_global_information.Player_Health = Player.health or { current = 0, max = 0, percent = 0 }\n\t\tml_global_information.Player_Profession = Player.profession or 0\n\t\tml_global_information.Player_ProfessionName = table_invert(GW2.CHARCLASS)[ml_global_information.Player_Profession] or \"NoClass\"\n\t\tml_global_information.Player_Power = Player.power or 0\n\t\tml_global_information.Player_Endurance = Player.endurance or 0\n\t\tml_global_information.Player_InCombat = Player.incombat or false\t\t\n\t\tml_global_information.Player_Position = Player.pos\n\t\tml_global_information.Player_Level = Player.level\n\t\tml_global_information.Player_OnMesh = Player.onmesh or false\n\t\tml_global_information.Player_Alive = Player.alive or false\n\t\tml_global_information.Player_IsMoving = Player:IsMoving() or false\n\t\tml_global_information.Player_CanMove = Player:CanMove() or false\n\t\tml_global_information.Player_MovementDirections = Player:GetMovement() or { forward=false, backward=false, left=false, right=false }\n\t\tml_global_information.Player_Inventory_SlotsFree = Inventory.freeslotcount or 0\n\t\tml_global_information.Player_HealthState = Player.healthstate or 0\n\t\tml_global_information.Player_SwimState = Player.swimming or 0\n\t\tml_global_information.Player_MovementState = Player:GetMovementState() or 1\n\t\tml_global_information.Player_Target = Player:GetTarget() or {}\t\t\n\t\tml_global_information.Player_Party = Player:GetParty() or nil\n\t\n\t\tml_global_information.CurrentMapID = Player:GetLocalMapID() or 0\n\t\tif ( gw2_datamanager and ml_global_information.CurrentMapID ~= 0) then  \n\t\t\t\tml_global_information.CurrentMapName = gw2_datamanager.GetMapName( ml_global_information.CurrentMapID ) \n\t\telse\n\t\t\t\tml_global_information.CurrentMapName = \"\"\n\t\tend\n\t\n\t\tml_global_information.AttackRange = gw2_skill_manager.GetMaxAttackRange()\n\t\tml_global_information.Player_CurrentWeaponSet = Player:GetCurrentWeaponSet() or 0\t-- 0 Aqua1, 1 Aqua2, 2 Engikit, 3 Necro Lich Form/ranger astralform,  4 Weapon1, 5 Weapon2\n\t\tml_global_information.Player_TransformID = Player:GetTransformID() or 0 -- 1-4 attunement, 5 deathshroud, 9 rangernormal, 10 rangerastralform\n\n\t\tself:success()\nelse\n\t\tself:fail()\nend",
						startcode = "",
						xposoffset = 0,
					},
				},
				
				{
					class = "Action",
					nodes = 
					{
					},
					variables = 
					{
						finishcode = "",
						info = "Update SM skill tacker data",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
						runcode = "if ( ml_global_information.GameState == 16 ) then\n\t\tgw2_skill_manager:OnUpdate(ml_global_information.Now)\n\t\tself:success()\nelse\n\t\tself:fail()\nend",
						startcode = "",
						xposoffset = 0,
					},
				},
				
				{
					class = "Sequence",
					nodes = 
					{
						
						{
							class = "Action",
							nodes = 
							{
							},
							variables = 
							{
								finishcode = "",
								info = "Player Alive",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Health State: '..tostring(ml_global_information.Player_HealthState))\nGUI:Text('Downed: '..tostring(ml_global_information.Player_HealthState == GW2.HEALTHSTATE.Downed))\nlocal target = gw2_common_functions.GetBestAggroTarget(true)\nif ( ValidTable(target) ) then\n\tGUI:Text('Downed Target: '..target.name)\nelse\n\tGUI:Text('Downed Target: None')\nend\nGUI:Text('Castinfo-Duration: '..tostring(Player.castinfo.duration))\n",
								runcode = "if ( ml_global_information.Player_HealthState == GW2.HEALTHSTATE.Alive ) then\t\n\tself:success()\nelse\n\tself:fail()\nend",
								startcode = "",
								xposoffset = 0,
							},
						},
						
						{
							class = "AlwaysFail",
							nodes = 
							{
								
								{
									class = "PrioritySelector",
									nodes = 
									{
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "Deposit Items",
														monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
														runcode = "if ( Settings.GW2Minion.deposititems == true and ml_global_information.Player_Inventory_SlotsFree <= 20) then\n\tInventory:DepositCollectables()\n\tself:success()\nelse\n\tself:fail()\nend\n",
														startcode = "",
														xposoffset = 0,
													},
												},
											},
											variables = 
											{
												duration = 5000,
												info = "DepositItems every 5 Seconds",
												monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.lastrun ) then local tmr = self.variables.duration/1000 - (GetTickCount() - self.lastrun) if ( tmr < 0 ) then tmr = 0 end GUI:Text('Runs again in: '..tostring(round(tmr,2 ))..' s')\telse\tGUI:Text('Runs again in: '..tostring(round(self.variables.duration/1000))..' s') end",
												xposoffset = 0,
											},
										},
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "AOE Loot",
														monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
														runcode = "if ( ml_global_information.Player_Inventory_SlotsFree > 0 ) then\n\tPlayer:AoELoot()\n\tself:success()\nelse\n\tself:fail()\nend\n",
														startcode = "",
														xposoffset = 0,
													},
												},
											},
											variables = 
											{
												duration = 1050,
												info = "AOE Loot every 1050 ms",
												monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.lastrun ) then local tmr = self.variables.duration/1000 - (GetTickCount() - self.lastrun) if ( tmr < 0 ) then tmr = 0 end GUI:Text('Runs again in: '..tostring(round(tmr,2 ))..' s')\telse\tGUI:Text('Runs again in: '..tostring(round(self.variables.duration/1000))..' s') end",
												xposoffset = 0,
											},
										},
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "Salvage every ~1500 ms",
														monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
														runcode = "if ( ml_global_information.Player_InCombat == false ) then\n\tgw2_salvage_manager.salvage()\n\tself:success()\nelse\n\tself:fail()\nend\n",
														startcode = "",
														xposoffset = 0,
													},
												},
											},
											variables = 
											{
												duration = 1500,
												info = "Salvage every ~1500 ms",
												monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.lastrun ) then local tmr = self.variables.duration/1000 - (GetTickCount() - self.lastrun) if ( tmr < 0 ) then tmr = 0 end GUI:Text('Runs again in: '..tostring(round(tmr,2 ))..' s')\telse\tGUI:Text('Runs again in: '..tostring(round(self.variables.duration/1000))..' s') end",
												xposoffset = 0,
											},
										},
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "Swim to surface if we are not on mesh",
														monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
														runcode = "if(1==1) then self:fail() return end\nif ( ml_global_information.Player_SwimState == GW2.SWIMSTATE.Diving and ml_global_information.Player_OnMesh == false) then\n\tml_global_information.swimUp = true\n\tPlayer:SetMovement(GW2.MOVEMENTTYPE.SwimUp)\n\tself:success()\n\treturn\nelseif( ml_global_information.swimUp == true ) then\n\tml_global_information.swimUp = false\n\tPlayer:UnSetMovement(GW2.MOVEMENTTYPE.SwimUp)\n\tself:success()\n\treturn\nend\t\t\n\t\t\n--Dont swim on the surface where we cannot fight\nif ( ml_global_information.Player_SwimState == GW2.SWIMSTATE.Swimming and ml_global_information.Player_OnMesh and ml_global_information.Player_InCombat) then\n\tml_global_information.swimDown = true\n\tPlayer:SetMovement(GW2.MOVEMENTTYPE.SwimDown)\n\tself:success()\n\treturn\nelseif( ml_global_information.swimDown == true ) then\n\tml_global_information.swimDown = false\n\tPlayer:UnSetMovement(GW2.MOVEMENTTYPE.SwimDown)\n\tself:success()\n\treturn\nend\t\nself:fail()",
														startcode = "",
														xposoffset = 0,
													},
												},
											},
											variables = 
											{
												duration = 1000,
												info = "Swim to surface if we are not on mesh",
												monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.lastrun ) then local tmr = self.variables.duration/1000 - (GetTickCount() - self.lastrun) if ( tmr < 0 ) then tmr = 0 end GUI:Text('Runs again in: '..tostring(round(tmr,2 ))..' s')\telse\tGUI:Text('Runs again in: '..tostring(round(self.variables.duration/1000))..' s') end",
												xposoffset = 0,
											},
										},
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "Claim Rewards every 15 second",
														monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
														runcode = "if ( ml_global_information.Player_Inventory_SlotsFree > 2 and Player:CanClaimReward()) then\n\tPlayer:ClaimReward()\n\tself:success()\nelse\n\tself:fail()\nend",
														startcode = "",
														xposoffset = 0,
													},
												},
											},
											variables = 
											{
												duration = 15000,
												info = "Claim Rewards every 15 second",
												monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.lastrun ) then local tmr = self.variables.duration/1000 - (GetTickCount() - self.lastrun) if ( tmr < 0 ) then tmr = 0 end GUI:Text('Runs again in: '..tostring(round(tmr,2 ))..' s')\telse\tGUI:Text('Runs again in: '..tostring(round(self.variables.duration/1000))..' s') end",
												xposoffset = 0,
											},
										},
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "Equip Gathering Tools- Check every 10 seconds",
														monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
														runcode = "self:fail()\n\n",
														startcode = "",
														xposoffset = 0,
													},
												},
											},
											variables = 
											{
												duration = 10000,
												info = "Equip Gathering Tools- Check every 10 seconds",
												monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.lastrun ) then local tmr = self.variables.duration/1000 - (GetTickCount() - self.lastrun) if ( tmr < 0 ) then tmr = 0 end GUI:Text('Runs again in: '..tostring(round(tmr,2 ))..' s')\telse\tGUI:Text('Runs again in: '..tostring(round(self.variables.duration/1000))..' s') end",
												xposoffset = 0,
											},
										},
									},
									variables = 
									{
										expanded = true,
										info = "General (instant) Tasks",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
										xposoffset = 0,
									},
								},
							},
							variables = 
							{
								info = "General (instant) Tasks, which don't interfear with the bot.",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
								xposoffset = 0,
							},
						},
					},
					variables = 
					{
						expanded = true,
						info = "",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
						xposoffset = 0,
					},
				},
			},
			variables = 
			{
				expanded = true,
				failThreshold = 1,
				info = "GameState Switch",
				monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.activeTask or 'None')) GUI:Text('Succeeded Tasks: '..tostring(self.succeededTasks)) GUI:Text('Failed Tasks: '..tostring(self.failedTasks)) GUI:Text('Running Tasks: '..tostring(self.ranTasks))",
				successThreshold = 1,
				xposoffset = 0,
			},
		},
	},
	variables = 
	{
		expanded = true,
		filename = "GW2_Main.ct",
		finishcode = "",
		info = "GW2Minion main code, gets called from gw2.lua. \nUpdates Managers and global variables. Handles Main Window and GameStates.",
		menucode = "-- Character Select\n\tif ( Settings.GW2Minion.autostartbot == nil) then Settings.GW2Minion.autostartbot = false end\n\tif ( Settings.GW2Minion.guestserver == nil) then Settings.GW2Minion.guestserver = 0 end\n\n\n-- Ingame\n\tif (Settings.GW2Minion.deposititems == nil) then Settings.GW2Minion.deposititems = false end\n\tif(Settings.GW2Minion.combatmovement == nil) then Settings.GW2Minion.combatmovement = false end\n\t\tif(Settings.GW2Minion.ignoreyellowmobs == nil) then Settings.GW2Minion.ignoreyellowmobs = false end\n-- Cutscene\n\tif ( Settings.GW2Minion.skipcutscene == nil) then Settings.GW2Minion.skipcutscene = false end\n\nGUI:SetNextTreeNodeOpened(true,GUI.SetCond_Appearing)\nif (GUI:TreeNode(GetStringML(\"settings\"))) then\n\n\t-- Character Select\n\tif (ml_global_information.GameState == 4) then GUI:SetNextTreeNodeOpened(true,GUI.SetCond_Always) else GUI:SetNextTreeNodeOpened(false,GUI.SetCond_Appearing) end\n\tif (GUI:TreeNode(GetStringML(\"CharacterSelect\"))) then\n\t\tSettings.GW2Minion.autostartbot = GUI:Checkbox(GetString(\"autoStartBot\"),Settings.GW2Minion.autostartbot)\n\t\tGUI:PushItemWidth(150)\n\t\tSettings.GW2Minion.guestserver = GUI:Combo(GetString(\"guestserver\"),Settings.GW2Minion.guestserver,ml_global_information.GuestServerList)\n\t\tGUI:PopItemWidth()\n\t\tGUI:TreePop()\n\tend\n\n\t-- Ingame\n\tif (ml_global_information.GameState == 16) then GUI:SetNextTreeNodeOpened(true,GUI.SetCond_Appearing) end\n\tif (GUI:TreeNode(GetStringML(\"Ingame\"))) then\n\t\tSettings.GW2Minion.deposititems = GUI:Checkbox(GetString(\"depositItems\"),Settings.GW2Minion.deposititems)\n\t\tSettings.GW2Minion.combatmovement = GUI:Checkbox(GetString(\"combatMovement\"),Settings.GW2Minion.combatmovement)\n\t\tSettings.GW2Minion.ignoreyellowmobs = GUI:Checkbox(GetString(\"ignoreYellowMob\"),Settings.GW2Minion.ignoreyellowmobs)\n\t\tGUI:TreePop()\n\tend\n\n\t-- Cutscene\n\tif (ml_global_information.GameState == 14 or ml_global_information_GameState == 10) then GUI:SetNextTreeNodeOpened(true,GUI.SetCond_Appearing) end\n\tif (GUI:TreeNode(GetStringML(\"Cutscene\"))) then\n\t\tSettings.GW2Minion.skipcutscene = GUI:Checkbox(GetString(\"skipcutscene\"),Settings.GW2Minion.skipcutscene)\n\t\tGUI:TreePop()\n\tend\n\tGUI:TreePop()\nend",
		monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Game State: '..tostring(ml_global_information.GameState))",
		runcode = "ml_global_information.GameState = GetGameState()",
		startcode = "ml_global_information.GameState = GetGameState()",
		xposoffset = 0,
	},
}



return tbl